#!/usr/bin/env bash

# Check Bash version
if (( BASH_VERSINFO[0] < 5 )); then
    echo "Your Bash version ($BASH_VERSION) is outdated. Please update to the latest version." >&2
    exit 1
fi

set -euo pipefail

# Constants
declare -r VERSION="1.0.0"
declare -r SCRIPT_NAME="gh-heatmap"
declare -r CACHE_FILE="commit_cache.json"

# Colors
declare -r GREEN="\e[32m"
declare -r CYAN="\e[36m"
declare -r BOLD="\e[1m"
declare -r DIM="\e[2m"
declare -r RESET="\e[0m"

declare -A _theme=(
    [color_breakpoints]="0 1 2 4 8 16"
    
    [color_commits]="\e[38;5;223m \e[38;5;229m\e[48;5;214m \e[38;5;234m\e[48;5;208m \e[38;5;208m\e[48;5;166m \e[38;5;229m\e[48;5;124m"

    [color_future]="\e[38;5;245m"
    
    [color_year]="\e[1;38;5;229;48;5;94m"
    [color_year_padding]="\e[38;5;137m"
    
    [color_month]="\e[38;5;142m"
    [color_dow]="\e[38;5;144m"

    [color_author]="\e[1;38;5;208m"

    [symbol_no_commits]="·  "
    [symbol_has_commits]=" "
    [symbol_future]="·  "
    [symbol_year_padding]="   "
)

# Text
i18n_day_of_week=("Mon" "Tue" "Wed" "Thu" "Fri" "Sat" "Sun")
i18n_months=("Jan" "Feb" "Mar" "Apr" "May" "Jun" "Jul" "Aug" "Sep" "Oct" "Nov" "Dec")
i18n_search_no_result="Nothing found"

# Configuration
config_show_commits=false
config_show_legend=false
config_show_days_of_month=false
config_show_empty_years=true
config_years=1
config_weeks_start=1
config_cell_width=2
config_months_gap=0
config_breakpoints_multiplier=1

# Ensure global variables
read -r CURRENT_YEAR CURRENT_DAY <<< "$(date +"%Y %-j")"
# Set Gruvbox Blue as the only theme
declare -n theme=_theme
declare -a COMMIT_COLORS
declare -a BREAKPOINTS
declare -a commits_per_day

function main() {
    # Initialize global arrays for processing
    declare -g -A commit_counts
    declare -g -a years
    declare -g -a sorted_years
    
    parse_args "$@"
    setup_theme
    load_and_process_commits
    display_heatmap
    echo
}

function parse_args() {
    while getopts ":cdelsy:w:t:" opt; do
        case ${opt} in
            c) config_show_commits=true ;;
            d) config_show_days_of_month=true ;;
            e) config_show_empty_years=false ;;
            l) config_show_legend=true ;;
            s) config_weeks_start=$OPTARG ;;
            y) config_years=$OPTARG ;;
            w) config_cell_width=$OPTARG ;;
            t) config_theme_name=$OPTARG ;;
            \?) echo "Invalid option: -$OPTARG" >&2; exit 1 ;;
            :) echo "Option -$OPTARG requires an argument." >&2; exit 1 ;;
        esac
    done
}

function setup_theme() {
    # Set up theme colors
    readarray -td " " COMMIT_COLORS <<< "${theme[color_commits]} "
    unset 'COMMIT_COLORS[-1]'
    COMMIT_COLORS_COUNT="${#COMMIT_COLORS[@]}"

    # Set up breakpoints
    readarray -td " " BREAKPOINTS <<< "${theme[color_breakpoints]} "
    unset 'BREAKPOINTS[-1]'
    BREAKPOINTS_COUNT="${#BREAKPOINTS[@]}"
}

function load_and_process_commits() {    
    if [[ ! -f "$CACHE_FILE" ]]; then
        echo "Error: Commit cache file not found. Please ensure that $CACHE_FILE exists." >&2
        exit 1
    fi

    # Load JSON data - filter directly for the current year only
    local current_year=$(date +"%Y")
    
    # Optimized JQ query - filters directly for the current year
    local commit_count_per_day=$(jq -r --arg year "$current_year" '
        to_entries | 
        map(.value[] | select(startswith($year))) | 
        group_by(.) | 
        map([.[0], length | tostring] | join(" ")) | 
        .[]
    ' "$CACHE_FILE")
    
    # Optimized processing only for the current year
    process_commit_data "$commit_count_per_day" "$current_year"
    
    # Set sorted_years directly to the current year
    sorted_years=("$current_year")
}

function process_commit_data() {
    local commit_data="$1"
    local current_year="$2"
    
    # Declare arrays for processing
    declare -A commit_counts_tmp
    
    # Precalculate days in month for the current year
    local days_in_month=(0 31 $(( 28 + (current_year % 4 == 0 ? 1 : 0) )) 31 30 31 30 31 31 30 31 30 31)
    local -A day_of_year_cache
    
    # Precalculate day of the year for all possible dates
    local cum_days=0
    for ((m=1; m<=12; m++)); do
        for ((d=1; d<=days_in_month[m]; d++)); do
            day_of_year_cache["$m-$d"]=$((cum_days + d))
        done
        cum_days=$((cum_days + days_in_month[m]))
    done
    
    # Process each entry in the format "2025-01-01 5"
    while read -r date count; do
        # Extract month and day (optimized as year is already known)
        local month=$((10#$(echo "$date" | cut -d'-' -f2)))
        local day_of_month=$((10#$(echo "$date" | cut -d'-' -f3)))
        
        # Faster calculation of day of the year without date command
        local day_of_year=${day_of_year_cache["$month-$day_of_month"]}
        
        # Add year to the list if not already there (executed only once)
        if [[ ! " ${years[*]} " =~ " $current_year " ]]; then
            years+=("$current_year")
        fi
        
        # Accumulate commits per day
        local key="${current_year} ${day_of_year}"
        if [[ -z "${commit_counts_tmp[$key]:-}" ]]; then
            commit_counts_tmp[$key]=$count
        else
            commit_counts_tmp[$key]=$(( commit_counts_tmp[$key] + count ))
        fi
    done <<< "$commit_data"
    
    # Transfer the temporary data to the global array
    for key in "${!commit_counts_tmp[@]}"; do
        commit_counts[$key]=${commit_counts_tmp[$key]}
    done
}

function has_commits_in_year() {
    # Optimized: We know we only have the current year
    return 0
}

function fill_commits_for_year() {
    local year="$1"
    
    # Fill commits_per_day with actual data - optimized version
    for key in "${!commit_counts[@]}"; do
        # Since we only have one year, we can reduce the string split
        local day=$(echo "$key" | cut -d' ' -f2)
        local count=${commit_counts["$key"]}
        commits_per_day[$(( year_start_padding + day - 1 ))]=$count
    done
}

function init_year() {
    local year="$1"

    # Faster calculation of weekday for January 1st - precalculated for 2025
    local year_start_day_of_week
    if [[ "$year" == "2025" ]]; then
        # January 1, 2025 is a Wednesday (3)
        year_start_day_of_week=3
    else
        year_start_day_of_week=$(date --date="$year-01-01" +%u)
    fi
    
    # Faster calculation for leap year
    leap_days=$(( year % 4 == 0 ? 1 : 0 ))
    
    year_start_padding=$(( (year_start_day_of_week - config_weeks_start + 7) % 7 ))
    year_end_padding=$(( 6 - (year_start_day_of_week + 364 + leap_days - 1) % 7 ))
    total_days_padded=$(( year_start_padding + 365 + leap_days + year_end_padding ))
    
    # Initialize commits_per_day array - optimized version
    commits_per_day=()
    for (( i = 0; i < year_start_padding; i++ )); do 
        commits_per_day[i]="x"
    done
    
    for (( i = year_start_padding; i < total_days_padded - year_end_padding; i++ )); do
        commits_per_day[i]=0
    done
    
    for (( i = total_days_padded - year_end_padding; i < total_days_padded; i++ )); do 
        commits_per_day[i]="x"
    done

    # Optimized generation of days of the month for display
    if [[ $config_show_days_of_month == true || $config_months_gap != 0 ]]; then
        months_days=()
        
        # Precalculate days instead of date command for each day
        local days_in_month=(31 $(( 28 + leap_days )) 31 30 31 30 31 31 30 31 30 31)
        local day_counter=1
        local month_index=0
        
        for (( i = 0; i < 365 + leap_days; i++ )); do
            months_days[i + year_start_padding]=$day_counter
            day_counter=$((day_counter + 1))
            
            if (( day_counter > days_in_month[month_index] )); then
                day_counter=1
                month_index=$((month_index + 1))
            fi
        done
    fi
}

function display_heatmap() {
    # Show legend if desired
    if [[ "$config_show_legend" == true ]]; then
        print_legend
    fi

    # Create a heatmap for each year
    for year in "${sorted_years[@]}"; do
        # Skip years without commits if configured
        if [[ "$config_show_empty_years" == false ]] && ! has_commits_in_year "$year"; then
            continue
        fi

        # Initialize year
        init_year "$year"
        
        # Fill commits_per_day with actual data
        fill_commits_for_year "$year"
        
        # Print year
        print_year "$year"
    done
}

function print_year() {
    local year="$1"

    echo -ne "\n${theme[color_year]} $year ${RESET} "
    print_month_bar

    for dow in {0..6}; do
        local dow_name="${i18n_day_of_week[(dow + config_weeks_start - 1) % 7]:0:4}"

        printf "${theme[color_dow]}%*s%s  ${RESET}" $(( 5 - ${#dow_name} )) "" "$dow_name"

        for (( day_index = dow; day_index < total_days_padded; day_index += 7 )); do
            local commits="${commits_per_day[day_index]:-0}"
            local text="${theme[symbol_no_commits]}"
            local color=""
            local months_gap_text=""

            if [[ $config_months_gap != 0 && $commits != "x" ]] && (( day_index != dow && months_days[day_index] < months_days[day_index - 7] )); then
                printf -v months_gap_text "%*s" "$config_months_gap"
            fi

            if [[ $commits == "x" ]]; then
                text="${theme[symbol_year_padding]}"
                color="${theme[color_year_padding]}"
            else
                if (( year == CURRENT_YEAR && (day_index - year_start_padding + 1) > CURRENT_DAY )); then
                    text="${theme[symbol_future]}"
                    color="${theme[color_future]}"
                else
                    color="${COMMIT_COLORS[COMMIT_COLORS_COUNT - 1]}"

                    for (( i = COMMIT_COLORS_COUNT - 1; i >= 0; i-- )); do
                        if (( commits >= (i < 2 ? BREAKPOINTS[i] : BREAKPOINTS[i] * config_breakpoints_multiplier) )); then
                            color="${COMMIT_COLORS[i]}"
                            break
                        fi
                    done
                fi

                if [[ $config_show_days_of_month == true ]]; then
                    # We don't right-align this as it causes the month bar to appear incorrectly
                    text="${months_days[day_index]:-0}"
                elif (( commits != 0 )); then
                    text="${theme[symbol_has_commits]}"

                    if [[ $config_show_commits == true ]]; then
                        if (( commits > 9 && config_cell_width == 2 )); then
                            text="9+"
                        elif (( commits > 99 && config_cell_width == 3 )); then
                            text="99+"
                        else
                            text="$commits"
                        fi
                    fi
                fi
            fi

            printf "${months_gap_text}${color}%-${config_cell_width}s${RESET}" "${text:0:$config_cell_width}"
        done

        echo
    done
}

function print_month_bar() {
    local days_in_month=(31 "$(( 28 + leap_days ))" 31 30 31 30 31 31 30 31 30 31)
    local days_sum=$year_start_padding
    local prev_week_number=0

    for month in {0..11}; do
        local next_week_number=$(( days_sum += days_in_month[month], days_sum / 7 ))
        local month_padding=$(( (next_week_number - prev_week_number) * config_cell_width + config_months_gap - ${#i18n_months[month]} ))

        printf "${theme[color_month]}%s%*s${RESET}" "${i18n_months[month]}" $month_padding ""
        prev_week_number=$next_week_number
    done

    echo
}

function print_legend() {
    echo -ne "\n${BOLD}COMMITS${RESET}\n"

    for (( i = 0; i < COMMIT_COLORS_COUNT; i++ )); do
        echo -e "${COMMIT_COLORS[i]}    ${RESET} $(( i < 2 ? BREAKPOINTS[i] : BREAKPOINTS[i] * config_breakpoints_multiplier ))+"
    done
}

# Start the script
main "$@"